Step 1: Understand the PDF File Structure
A PDF file is a structured binary file with the following components:

Header: Specifies the PDF version (e.g., %PDF-1.7).
Body: Contains a series of objects (e.g., pages, fonts, content streams).
Cross-Reference Table: Maps object numbers to byte offsets in the file for random access.
Trailer: Contains metadata and points to the cross-reference table.
Minimal PDF Example
A minimal PDF with one page containing the text "Hello, World!" looks like this (simplified):

text

Collapse

Unwrap

Copy
%PDF-1.7
1 0 obj
<< /Type /Catalog /Pages 2 0 R >>
endobj
2 0 obj
<< /Type /Pages /Kids [3 0 R] /Count 1 >>
endobj
3 0 obj
<< /Type /Page /Parent 2 0 R /Resources << /Font << /F1 4 0 R >> >> /MediaBox [0 0 612 792] /Contents 5 0 R >>
endobj
4 0 obj
<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>
endobj
5 0 obj
<< /Length 44 >>
stream
BT /F1 12 Tf 100 700 Td (Hello, World!) Tj ET
endstream
endobj
xref
0 6
0000000000 65535 f 
0000000010 00000 n 
0000000055 00000 n 
0000000100 00000 n 
0000000179 00000 n 
0000000228 00000 n 
trailer
<< /Size 6 /Root 1 0 R >>
startxref
292
%%EOF
Objects: Each object (e.g., 1 0 obj) defines a component (catalog, pages, page, font, content stream).
Content Stream: The stream in object 5 contains drawing commands (e.g., BT for begin text, /F1 12 Tf to set font and size, 100 700 Td to position text, (Hello, World!) Tj to draw text, ET for end text).
Cross-Reference Table: Lists the byte offsets of each object.
Trailer: Points to the cross-reference table and the root object (/Root 1 0 R).
Step 2: Challenges of Building a PDF Generator Without Libraries
Complexity of the PDF Specification:
The PDF specification is over 1,000 pages long and includes features like text rendering, fonts, graphics, compression, and encryption.
Even a simple PDF requires understanding objects, streams, fonts, and the coordinate system.
Font Handling:
PDFs require font definitions. Without external libraries, you’re limited to the 14 standard PDF fonts (e.g., Helvetica, Times-Roman), as embedding custom fonts requires parsing font files (e.g., TrueType) and generating font subsets, which is complex.
Text Positioning:
PDFs use a coordinate system where (0,0) is the bottom-left corner, and units are in points (1 point = 1/72 inch). You’ll need to manually calculate text positions, which can be tricky for multi-line invoices.
Cross-Reference Table:
The cross-reference table requires knowing the exact byte offset of each object in the file, which means you need to track the file position as you write.
Binary File Handling:
PDFs are binary files, and you need to ensure proper line endings (\n for Unix, \r\n for Windows) and handle streams correctly.
Effort and Time:
Implementing a basic PDF generator might take 10–20 hours for a minimal version (single page, simple text). Adding features like tables, multiple pages, or formatting (e.g., bold text) would significantly increase the effort.